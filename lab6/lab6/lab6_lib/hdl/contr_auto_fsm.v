//
// Module lab6_lib.CONTR_AUTO.fsm
//
// Created:
//          by - maro4_000.UNKNOWN (LILY-PC)
//          at - 23:47:12 11.12.2019
//
// Generated by Mentor Graphics' HDL Designer(TM) 2018.2 (Build 19)
//
`resetall
`timescale 1ns/10ps
module CONTR_AUTO( 
   // Port Declarations
   input   wire      Clk, 
   input   wire      End, 
   input   wire      R, 
   input   wire      Start, 
   output  reg       Busy, 
   output  reg       Enable, 
   output  reg       Ready
);


// Internal Declarations


// Declare any pre-registered internal signals
reg Busy_int;
reg Enable_int;
reg Ready_int;

// Module Declarations

// State encoding
parameter 
          s0 = 2'd0,
          s1 = 2'd1,
          s2 = 2'd2,
          s3 = 2'd3;

reg [1:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   End, 
   Start, 
   current_state
)
begin : next_state_block_proc
   case (current_state) 
      s0: begin
         if (Start == 1)
            next_state = s1;
         else if (Start == 0)
            next_state = s0;
         else
            next_state = s0;
      end
      s1: begin
         if (Start == 0)
            next_state = s2;
         else if (Start == 1)
            next_state = s1;
         else
            next_state = s1;
      end
      s2: begin
         if (End == 1)
            next_state = s3;
         else if (End == 0)
            next_state = s2;
         else
            next_state = s2;
      end
      s3: begin
         next_state = s0;
      end


   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   End, 
   Start, 
   current_state
)
begin : output_block_proc

   // Combined Actions
   case (current_state) 
      s0: begin
         if (Start == 1) begin
            Busy_int = 1 ;
            Enable_int = 0 ;
            Ready_int = 0 ;
         end
         else if (Start == 0) begin
            Enable_int = 0 ;
            Busy_int = 0 ;
            Ready_int = 0 ;
         end
      end
      s1: begin
         if (Start == 0) begin
            Busy_int = 1 ;
            Enable_int = 1 ;
            Ready_int = 0 ;
         end
         else if (Start == 1) begin
            Busy_int = 1 ;
            Enable_int = 0 ;
            Ready_int = 0 ;
         end
      end
      s2: begin
         if (End == 1) begin
            Busy_int = 0 ;
            Enable_int = 0 ;
            Ready_int = 1 ;
         end
         else if (End == 0) begin
            Busy_int = 1 ;
            Enable_int = 1 ;
            Ready_int = 0 ;
         end
      end
      s3: begin
         Busy_int = 0 ;
         Enable_int = 0 ;
         Ready_int = 0 ;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge Clk, 
   negedge R
) 
begin : clocked_block_proc
   if (!R) begin
      current_state <= s0;
      // Reset Values
      Busy <= 0;
      Enable <= 0;
      Ready <= 0;
   end
   else 
   begin
      current_state <= next_state;
      // Registered output assignments
      Busy <= Busy_int;
      Enable <= Enable_int;
      Ready <= Ready_int;
   end
end // Clocked Block

endmodule // CONTR_AUTO
